\documentclass[xcolor=svgnames]{beamer}
\usetheme{Boadilla}
\usecolortheme[named=SeaGreen]{structure}
\usepackage{graphicx}
\usepackage{breqn}
\usepackage{xcolor}
\usepackage{booktabs}
\usepackage{verbatim}
\usepackage{tikz}
\usepackage{lmodern}
\usetikzlibrary{shadows,arrows,positioning}
\definecolor{links}{HTML}{2A1B81}
\hypersetup{colorlinks,linkcolor=links,urlcolor=links}
\usepackage{pgfpages}

\newcommand{\Bigtxt}[1]{\textbf{\textit{#1}}}

\begin{document}

\title[SWMP organizing]{Processing and organizing SWMP time series for analysis}

\author[M. Beck, T. O'Brien]{Marcus W. Beck\inst{1} \and Todd D. O'Brien\inst{2}}

\date{}

\institute[]{\inst{1} ORISE, USEPA NHEERL Gulf Ecology Division\\ Email: \href{mailto:beck.marcus@epa.gov}{beck.marcus@epa.gov} \and \inst{2} NOAA/NMFS COPEPOD Project\\ Email: \href{todd.obrien@noaa.gov}{todd.obrien@noaa.gov}}

% knitr setup
<<setup, include = F, cache = F>>=
add_lib <- 'C:\\Users\\mbeck\\R\\library'
if(file.exists(add_lib)) .libPaths(add_lib)
rm('add_lib')
library(knitr)

# set global chunk options
opts_chunk$set(fig.align='center', fig.show='hold',message=F,dev='pdf',dev.args=list(family='serif'),fig.pos='!ht',warning=F,size= 'scriptsize', cache = T)
options(replace.assign=TRUE,width=80,digits=1)
@

% load SWMPr from local
<<swmpr, eval = T, echo = F, cache = F, message = F>>=
devtools::load_all('M:/docs/SWMPr')
@

%%%%%%
\begin{frame}
\vspace{0.3in}
\centerline{
\begin{tikzpicture}
  \node[drop shadow={shadow xshift=0ex,shadow yshift=0ex},fill=white,draw] at (0,0) {\includegraphics[width=0.9\textwidth]{bg_main.jpg}};
\end{tikzpicture}}
\titlepage
\end{frame}

%%%%%%
\begin{frame}{Objectives and agenda}
\begin{itemize}
\onslide<+->
\item Objectives \\~\\
\begin{itemize}
\item How can SWMP data quality be evaluated and handled? \\~\\
\item How can data be selected and removed to facilitate analysis? \\~\\
\item What are some ways that data are combined and why would this be done? \\~\\
\end{itemize}
\onslide<+->
\item Agenda \\~\\
\begin{itemize}
\item Handling QAQC flags\\~\\
\item Appropriate use of data subsets \\~\\
\item Combining data for comparisons \\~\\
\end{itemize}
\end{itemize}
\end{frame}

%%%%%%
\begin{frame}{Interactive portion}
You can follow along in this module: \\~\\
\begin{itemize}
\item dataset2 \\~\\
\item script2 \\~\\
\end{itemize}
\Large
\centerline{\emph{Interactive!}}
\end{frame}

%%%%%%
\begin{frame}{Retrieve SWMP data}
We learned how to import SWMP data in the previous session \\~\\
To review, the easiest approach is to download the data outside of R, then import using the `import\_local' function \\~\\
Be sure that you use only the \href{http://cdmo.baruch.sc.edu/aqs/zips.cfm}{zip downloads} feature from CDMO - the `import\_local' functions works best with these data \\~\\
\centerline{\includegraphics[width = 0.8\textwidth]{adv_query.png}}
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Retrieve SWMP data}
Let's import some data for Apalachicola Bay
<<cache = T, echo = F>>=
# import data
path <- 'M:/docs/swmp_workshop_2014/training_modules/data/dataset2'
wq_dat <- import_local(path, 'apacpwq')
nut_dat <- import_local(path, 'apacpnut')
met_dat <- import_local(path, 'apaebmet')
@
<<impdat, cache = T, eval = F>>=
# reload the SWMPr package if you started a new session
library(SWMPr)

# import data
# change this path for the flash drive
path <- 'C:/data/dataset2'
wq_dat <- import_local(path, 'apacpwq')
nut_dat <- import_local(path, 'apacpnut')
met_dat <- import_local(path, 'apaebmet')
@
We've just imported data from 2011--2014 for three stations (apacpwq, apacpnut, apaebmet) and saved them in our workspace
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Retrieve SWMP data}
But don't take my word for it, take a look at the data!
<<>>=
# what are the dimensions of the water quality data?
dim(wq_dat)
# what are the dimensons of the nutrient data?
dim(nut_dat)
# what are the dimensions of the weather data?
dim(met_dat)
@
\end{frame}

%%%%%%
\begin{frame}[containsverbatim,shrink]{Retrieve SWMP data}
View the first six rows
<<>>=
# View the first six rows of the met data
head(met_dat) # or tail(met_dat) for last
@
\end{frame}

%%%%%%
\begin{frame}[containsverbatim,shrink]{Retrieve SWMP data}
What class is the data?
<<>>=
# class of the data
class(met_dat)
@
This tells us that the data are two different classes - `swmpr' and `data.frame'\\~\\
The swmpr object class was developed to work with specific funcitons
<<>>=
# what functions/methods work with swmpr objects?
methods(class = 'swmpr')
@
\end{frame}

%%%%%
\begin{frame}[containsverbatim,shrink]{Retrieve SWMP data}
A useful feature of R is that a class will have both \Bigtxt{data} and \Bigtxt{attributes}\\~\\
For the swmpr class, the \Bigtxt{data} are the raw swmpr data as a data.frame \\~\\
The \Bigtxt{attributes} are a list of metadata for the imported data
<<>>=
# what attributes are available for a swmpr object
names(attributes(met_dat))

# view the parameters attribute
attr(met_dat, 'parameters')
@
\end{frame}

%%%%%%
\begin{frame}[containsverbatim,shrink]{Organize SWMP data}
Now that we have a feel for the data, what needs to be done before we can start analyzing the information? \\~\\
Perhaps the first organizational tool you want to use is `qaqc.swmpr':\\~\\
\begin{itemize}
\item Remove observations with a specified QAQC flag value
\item Remove QAQC columns: \href{http://cdmo.baruch.sc.edu/data/qaqc.cfm}{Link} to QAQC codes \\~\\
\end{itemize}
\centerline{\includegraphics[width = 0.8\textwidth]{qaqc_flags.png}}
\end{frame}

%%%%%%
\begin{frame}[containsverbatim,shrink]{Retrieve SWMP data}
Remember, each parameter has a QAQC column preceded by `f\_'
<<>>=
# View the first six rows of the met data
head(met_dat)
@
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
You will have to decide which \href{http://cdmo.baruch.sc.edu/data/qaqc.cfm}{values} to keep \\~\\
It may be useful to get an idea of the distribution of QAQC flags in the data, use `qaqcchk'
<<>>=
# use qaqcchk to view distribution of qaqc flags
myqaqc <- qaqcchk(met_dat)
@
This function returns a data.frame that summarizes QAQC flags in the data
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
<<>>=
# a subset of results from the qaqcchk function
head(myqaqc)

# or view all in a separate window
View(myqaqc)
@
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
A plot of the data may also be useful to view QAQC flags (plot code in script2.R)\\~\\
Points in red did not pass QAQC
<<qaqc_ex, fig.height = 3.5, fig.width = 8, results = 'hold', echo = F>>=
# select values that did not pass qaqc
nopass <- grep('0', met_dat$f_totpar, invert = T)
nopass <- met_dat[nopass, ]

# plot totpar from met_dat
plot(totpar ~ datetimestamp, met_dat, type = 'l')

# add  points that did not pass qaqc
points(nopass$datetimestamp, nopass$totpar, col = 'red')
@
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
You should have an idea of how you want to handle QAQC values \\~\\
Next, use the `qaqc' function...
<<>>=
# filter observations by qaqc flags, remove qaqc columns
met_qaqc <- qaqc(met_dat)
@
The default is to keep only observations with a `0' QAQC flag\\~\\
See the help documentation for the function
<<eval = F>>=
# view help file
?qaqc
@
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
View the data after keeping only values that passed QAQC (`0' flag)
<<>>=
# data after qaqc processing
head(met_qaqc)
@
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
What if we want to keep all the values, regardless of flag?
<<>>=
# keep all values
met_qaqc <- qaqc(met_dat, qaqc_keep = NULL)

head(met_qaqc) # note the totpar column compared to the last example
@
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
If you're not convinced, try removing only the `0' flag
<<>>=
# keep only zero flags
to_keep <- c(-5, -4, -3, -2, -1, 1, 2, 3, 4, 5)
met_qaqc <- qaqc(met_dat, qaqc_keep = to_keep)

# does this result make sense??
head(met_qaqc)
@
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
We'll continue by using values that passed the QAQC checks
<<>>=
# continue with qaqc processed data

# water quality
wq_dat <- qaqc(wq_dat)

# nutrients
nut_dat <- qaqc(nut_dat)

# weather
met_dat <- qaqc(met_dat)
@
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
What is the next logical step after dealing with QAQC values? \\~\\
How would we further want to organize the data? \\~\\
Maybe we want to subset the data...
<<>>=
# view help file
?subset.swmpr
@
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
The subset.swmpr function has several arguments \\~\\
\begin{itemize}
\item swmpr\_in: input data (swmpr object)
\item subset: dates to keep
\item select: parameters to keep
\item operator: less than, greater than, etc. if only one date in subset
\item rem\_rows: remove empty rows
\item rem\_cols: remove empty columns \\~\\
\end{itemize}
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
The simplest use of `subset.swmpr' is to remove empty rows and columns
<<>>=
# rows, columns in wq_dat
dim(wq_dat)

# remove empty rows, columns
tmp <- subset(wq_dat, rem_rows = T, rem_cols = T)

# dimensions after removing empty rows, columns
dim(tmp)
@
About 1000 rows and four columns of missing data!  Note that removing rows may create a discontinuous time step...
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
The `select' argument of `subset.swmpr' is used to select parameters of interest - one to many
<<>>=
# select the DO column
tmp <- subset(wq_dat, select = 'do_mgl')
head(tmp)
@
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
The `select' argument of `subset.swmpr' is used to select parameters of interest - one to many
<<>>=
# select DO and salinity
tmp <- subset(wq_dat, select = c('do_mgl', 'sal'))
head(tmp)
@
Note the use of the concatenate function `c'
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
The `subset' argument of `subset.swmpr' selects a date range \\~\\
The dates must have a specific format - `YYYY-mm-dd HH:MM'
<<>>=
# select a date range, July 2012
dates <- c('2012-07-01 12:00', '2012-07-31 6:30')
tmp <- subset(wq_dat, subset = dates)
head(tmp) # view first six rows
@
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
Observations earlier or later than a date can also be selected \\~\\
This also requires the `operator' argument -- $>$, $<$, $>$=, $<$= , ==, !=
<<>>=
# get observations for 2013
dates <- '2013-01-01 00:00'
tmp <- subset(wq_dat, subset = dates, operator = '>=')
head(tmp)
@
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
Try a simple application of `subset' - plot dissolved oxygen and water temperature for October 2014
<<>>=
# dates and parameters  to select
dates <- '2014-10-01 00:00'
params <- c('do_mgl', 'temp')

# subset
tmp <- subset(wq_dat, select = params, subset = dates, operator = '>=')
head(tmp)
@
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
Try a simple application of `subset' - plot dissolved oxygen and water temperature for October 2014
<<eval = F>>=
# plot DO and water temp
plot(do_mgl ~ datetimestamp, data = tmp, type = 'l')
plot(temp ~ datetimestamp, data = tmp, type = 'l')
@
<<sub_plo, fig.height = 5, fig.width = 8, echo = F, out.width = '0.7\\textwidth'>>=
par(mfrow = c(2, 1), mar = c(4, 4, 1, 1))
plot(do_mgl ~ datetimestamp, data = tmp, type = 'l')
plot(temp ~ datetimestamp, data = tmp, type = 'l')
@
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
Now that we know how to handle QAQC flags and subset, what else could we do before we analyze? \\~\\
What if we want to compare time series from different datasets? \\~\\
Use the `comb.swmp' and `setstep.swmp' functions!
<<>>=
# help files
?comb.swmpr
?setstep.swmpr
@
Currently, only data from the same reserve can be combined
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
The `setstep.swmpr' function is used to standardize the time step of a swmpr object \\~\\
The `comb.swmpr' function is used to combine swmpr objects \\~\\
`setstep.swmpr' is used within `comb.swmpr' so you should not have to use it directly \\~\\
How is it done??
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
How can we combine SWMP data?
<<>>=
# combine water quality and weather data in the same object
tmp <- comb(wq_dat, met_dat)
head(tmp, 3) # first three rows
@
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
We now have a swmpr object with data from two stations, why do we want this? Easier plotting...
<<comb_plo, fig.height = 3, fig.width = 7, out.width = '0.7\\textwidth'>>=
# plot some combined data

# subset date ranges first
dates <- c('2012-06-01 0:0', '2012-07-31 0:0')
to_plot <- subset(tmp, subset = dates)

# plot
plot(atemp ~ datetimestamp, to_plot, type = 'l', col = 'red', ylab = 'Temp C')
lines(to_plot$datetimestamp, to_plot$temp, col = 'blue')
title('Air (red) and water (blue) temperature')
@
\end{frame}


%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
Arguments for `comb.swmpr': \\~\\
\begin{itemize}
\item ... : input swmpr data, separated by comma\\~\\
\item timestep: minutes defining the standardized time step\\~\\
\item differ: maximum difference in minutes for matching observations with original time steps to standardized time steps \\~\\
\item method: how the data are combined using the time stamps - union, intersect, or using a station
\end{itemize}
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
Changing the `timestep' argument can be useful for reducing data volume...
<<>>=
# dimension of earlier combined object
dim(tmp)

# create new object at two hour time step
tmp <- comb(wq_dat, met_dat, timestep = 120)
dim(tmp)
@
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
Changing the `timestep' argument can be useful for reducing data volume...
<<>>=
# note the time step in datetimestamp
head(tmp, 4)
@
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
\alert{Caution!} Standardizing a time series to a set time step may impose some inaccuracy \\~\\
Observations are matched as close in time as possible to the standardized time series \\~\\
By default, `comb.swmpr' matches the closest observation and discards the rest \\~\\
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
`Close' is defined by the `differ' argument\\~\\
The `differ' argument defines the maximum time difference for matching observations to the standardized time step \\~\\
The maximum allowed value for `differ' is one half the time step -- values beyond this window will create duplicates in your data \\~\\
Also be careful using small values for differ -- data will be lost
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
Case in point, try standardizing the nutrient time series with `setstep.swmpr'
<<>>=
dim(nut_dat) # initial dimensions

# standardize nutrient time series
tmp <- setstep(nut_dat, timestep = 60, differ = 5)
dim(tmp)

# remove empty rows, columns
tmp <- subset(tmp, rem_row = T, rem_col = T)
tmp #only four rows!
@
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
A final note about combining data... what about combining data with different \alert{time ranges}\\~\\
Consider combining two datasets \\~\\
\begin{itemize}
\item \alert{Scenario 1}: Time ranges are the same
\item \alert{Scenario 2}: Time ranges are not the same, but there is overlap
\item \alert{Scenario 3}: Time ranges are not the same, there is no overlap \\~\\
\end{itemize}
The `method' argument of `comb.swmpr' allows flexibility under different scenarios - time range intersect, union, or range of one station
\end{frame}

%%%%%%
\begin{frame}{Organize SWMP data}
\onslide<+->
\alert{Scenario 1}: Time ranges are the same \\~\\
Don't worry about changing `method' - it will have no effect\\~\\
Our previous examples represent scenario 1 \\~\\
\onslide<+->
\alert{Scenario 2}: Time ranges are not the same, but there is overlap \\~\\
\begin{itemize}
\item union: the default method, use the whole time range of both datasets
\item intersect: use only the time range that is shared between the two
\item or enter one of the station names, this says use the time range belonging to that station\\~\\
\end{itemize}
\onslide<+->
\alert{Scenario 3}: Time ranges are not the same, there is no overlap \\~\\
The only method that makes sense is `union'
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
Try some examples
<<>>=
# first we subset for the example
sub1 <- subset(wq_dat, subset = c('2012-07-01 0:0', '2012-07-31 0:0'))
sub2 <- subset(met_dat, subset = c('2012-07-15 0:0', '2012-08-12 0:0'))

# what are the date ranges?
attr(sub1, 'date_rng')
attr(sub2, 'date_rng')
@
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
Try some examples
<<>>=
# combine using union, this is the default
tmp <- comb(sub1, sub2, method = 'union')

# what is the date range of the combined object?
attr(tmp, 'date_rng')
@
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
Try some examples
<<>>=
# combine using intersect
tmp <- comb(sub1, sub2, method = 'intersect')

# what is the date range of the combined object?
attr(tmp, 'date_rng')
@
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
Try some examples
<<>>=
# combine using the time range in sub1
station <- attr(sub1, 'station')
tmp <- comb(sub1, sub2, method = station)

# what is the date range of the combined object?
attr(tmp, 'date_rng')
@
\end{frame}

%%%%%%
\begin{frame}[containsverbatim]{Organize SWMP data}
Now you have an idea of how to organize SWMP data for analysis!\\~\\
Here's what we did:\\~\\
\begin{itemize}
\item Evaluate and \alert{handle QAQC} flags in the data \\~\\
\item \alert{Subsetting} the data to remove empty rows/columns or to select variables or time ranges of interest \\~\\
\item \alert{Combining} data for comparison or data simplification \\~\\
\end{itemize}
Consult the SWMP cookboook for an example workflow! \\~\\
After lunch... what are some basic ways we can analyze the data?
\end{frame}

%%%%%%
\begin{frame}
\vspace{0.3in}
\centerline{
\begin{tikzpicture}
  \node[drop shadow={shadow xshift=0ex,shadow yshift=0ex},fill=white,draw] at (0,0) {\includegraphics[width=0.9\textwidth]{bg_main.jpg}};
\end{tikzpicture}}
\vspace{0.5in}
\Large
\centerline{\Bigtxt{Questions??}}
\end{frame}

\end{document}